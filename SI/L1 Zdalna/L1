Magdalena Jarecka

Zadania: 1, 2, 3, 4, 5, 6

Punkty: 7

=================================

Zadanie 1

a) Dla N parzystego obrazek w którym wszystkie liczby są równe n/2. Wtedy powstanie szachownica z dwoma polami czarnymi
   i dwoma białymi, co ma tylko dwa różne ułożenia. Dla N nieparzystego możemy w pierwszych dwóch wierszach i kolumnach
   wpisać 1, a reszcie dać 0. W ten sposób również dochodzimy do sytuacji szachownicy:

     N = 5:                        N = 4:

       1 1 0 0 0     1 1 0 0 0       2 2 2 2     2 2 2 2
     1 X O O O O   1 O X O O O     2 X X O O   2 O O X X
     1 O X O O O   1 X O O O O     2 X X O O   2 O O X X
     0 O O O O O   0 O O O O O     2 O O X X   2 X X O O
     0 O O O O O   0 O O O O O     2 O O X X   2 X X O O
     0 O O O O O   0 O O O O O,

b) Obrazek, w którym wszystkie liczby są równe 1
   Zamalujmy pole w pierwszym wierszu. Możemy to zrobić na N sposobów. Teraz weźmy kolejny wiersz. Możemy zamalować tylko te
   pola, które nie należą do kolumny w której zamalowane zostało poprzednie pole. Więc możemy to zrobić na N-1 sposobów.
   W kolejnym wierszu możemy zamalować pole na N-2 sposobów, w następnym na N-3 itd. Więc w sumie możemy pokolorować
   obrazek na N! sposobów.

Zadanie 2

Stan -  wierzchołek w jakim znajduje się samochód oraz ilość paliwa w baku (w wierzchołkach w których znajdują się stacje
        zakładamy że bak jest pełen)
Model - aby znaleźć się w nowym stanie musimy przejść przez krawędź, której koszt przejścia jest mniejszy niż ilość paliwa
        w naszym baku. Będąc w wierzchołku v i mając x paliwa i przechodząc do wierzchołka u przez krawędź o koszcie 'z'
        w wierzchołku u będziemy mieli x - z paliwa. Jeśli przechodzimy do wierzchołka który jest stacją ilość paliwa
        w naszym baku się odnawia.

Zadanie 3

Załóżmy, że pojemność baku nie decyduje o tym czy możemy przejechać z wierzchołka do wierzchołka, tylko zawsze się da.
Możemy teraz puścić Dijkstrę od wierzchołka docelowego co obliczy do niego najkrótsze drogi ze wszystkich innych wierzchołków.
Na tak uproszczonym grafie wiemy, że obliczona wartość będzie optymistyczna.

Zadanie 4

Niech naszym stanem będzie (v, x) gdzie v to wierzchołek a x to ilość paliwa w baku. Teraz będąc w
(v, x) znajdźmy stacje do których możemy dojechać z paliwem x oraz, jeśli damy radę, wierzchołek docelowy. Gdy już takie
znajdziemy policzmy ich zwykłą odległość do wierzchołka docelowego. Wtedy wynikiem będzie minimum z odległości do stacji
paliw do których możemy dojść z paliwem x + ich odległość do wierzchołka docelowego).
Możemy zoptymalizować obliczanie biorąc po kolei stany od najmniejszego do największego x.
Przykładowo:
Z wierzchołka v puszczamy dijkstrę i zapamiętujemy wyniki.
Jeśli policzyliśmy wynik dla stanu (v, 9) i chcemy policzyć dla (v, 10) możemy od razu wziąć już wynik (v, 9) (bo jeśli
dotarliśmy do tamtych stacji z paliwem 9 to z paliwem 10 tym bardziej) i porównać z wynikami stacji do których koszt
dojścia był równy 10.
Aby szybko znaleźć wierzchołki stacyjne o danym wyniku możemy użyć jakiejść struktury do ich zapamiętywanie (np. mapa)

Zadanie 5

Dla przesuwania jednym ruchu dowolnego podzbióru K skoczków:

a) Możemy wybrać dowolny podzbiór skoczków i każdego przesunąć na dowolne dozwolone (jedno z 8) miejsc. Tak więc maksymalny
   współczynnik rozgałęzienia będzie wynosił 9^K (dla każdego skoczka możemy wybrać miejsce od 1 do 8, albo w ogóle go nie
   wybrać)

b) Dla zbioru skoczków A oraz B są optymistyczne
   Dla jednego wszystkie opcje są optymistyczne

b) Wszystkie opcje są optymistyczne

Zadanie 6

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <ctime>
#include <sys/time.h>
#include <unordered_set>

using namespace std;

int R(int a, int b)
{
    return rand()%(b - a + 1) + a;
}

bool set(int n)
{
    unordered_set <int> Poziomo;
    unordered_set <int> xplusy;
    unordered_set <int> xminusy;
    for(int i = 0; i < n; i++)
    {
        unordered_set <int> sprawdzone;
        while(sprawdzone.size() < n)
        {
            int y = R(0, n - 1);
            if(Poziomo.count(y) == 0 && xplusy.count(i + y) == 0 && xminusy.count(i - y) == 0)
            {
                Poziomo.insert(y);
                xplusy.insert(i + y);
                xminusy.insert(i - y);
                //cout << "hetman " << i << ": " <<  y <<  endl;
                break;
            }
            else sprawdzone.insert(y);
        }
        if(sprawdzone.size() == n) return false;
    }
    return true;
}

void subtask_1()
{
    srand(time(0));
    int ans = 0;
    int iters = 2 * 1e6;
    for(int i = 0; i < iters; i++)
    {
        ans += set(6);
    }
    cout << (double)ans/iters << endl;
}

double find_solution(int n)
{
    double start_time = (double)clock()/CLOCKS_PER_SEC;
    while(!set(n));
    double finish_time = (double)clock()/CLOCKS_PER_SEC;
    return finish_time - start_time;
}

void subtask_2()
{
    for(int i = 4; i <= 1e9; i++)
    {
        double ans = find_solution(i);
        cout << i << " " << ans << endl;
        if(ans > 5.0)
        {
            cout << i - 1 << endl;
            break;
        }
    }
}
// odpowiedź subtask_1:
// 0.06957
//
// real	0m13.057s
// user	0m12.993s
// sys	0m0.030s

// ostatnie wyniki przed breakiem w subtask_2:
// 268 2.99214
// 269 1.63159
// 270 2.44703
// 271 2.63078
// 272 2.65608
// 273 1.33227
// 274 2.66828
// 275 0.835642
// 276 1.24604
// 277 0.392196
// 278 1.56174
// 279 0.230497
// 280 4.51789
// 281 1.55575
// 282 9.95316
// 281 <- wynik


int main()
{
    subtask_1();
    subtask_2();
}
